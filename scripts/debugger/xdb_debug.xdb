! The scripts assume that the scripts is located under the ATF scripts directory
! Need to update the path of the images (With full path)
set val /size=byte @ATF_FIB_BIN_PATH="EMPTY"
set val /size=byte @ATF_BL1_ELF_PATH="EMPTY"
set val /size=byte @BIN_EXT_ELF_PATH="EMPTY"
set val /size=byte @BL_ELF_PATH="EMPTY"

! Init bin_ext_run variable to check if the user run BLE init or not (the BLE script update the value to 1)
! if not, when run the ATF init, the script will stop at the beginning of ATF code
set val @bin_ext_run = 0

! Init atf_run variable to check if the user run ATF init or not (the ATF script update the value to 1)
! if not, when run the U-Boot init, the script will stop at the beginning of the U-Boot code
set val @atf_run = 0

! Set the flash is empty the breakpoints will be changed accordingly.
set val @flash_empty = 0

! if the flash empty - run the BLE script to load BLE code, then ATF code, and U-Boot code.
define macro /OVERWRITE /button restore_empty_flash "set val @flash_empty = 1; @binary_extension; @atf; @bootloader;"
! restore u-boot with one button
define macro /OVERWRITE /button restore_flash "@binary_extension; @atf; @bootloader;"

define macro /OVERWRITE /button binary_extension "batch \"scripts/debugger/xdb_scripts/binary_extension.xdb\"\n"
define macro /OVERWRITE /button atf "batch \"scripts/debugger/xdb_scripts/atf.xdb\"\n"
define macro /OVERWRITE /button bootloader "batch \"scripts/debugger/xdb_scripts/bootloader.xdb\"\n"
define macro /OVERWRITE /button help_message "\
MESSAGE \"			HELP MESSAGE\\n\
This help is relevant for Armada-7k/8k SoC debug and recovery\\n\
To recovery the board from scratch (empty flash), run empty_flash flash button.\\n\
- The empty_flash button will run the BootRom until it stuck in boot from UART mode.\\n\
  then load binary extension, ATF, and bootloader images and run them.\\n\\n\
To debug the Binary extension, ATF, and Bootloader need to run the buttons separately:\\n\
- binary_extension:\\n\
  will stop at the beginning of the binary extension,\\n\
  load the binary extension code and stop at the end of it,\\n\
  jump back to BootRom to clean the flash and MMU\\n\
- atf:\\n\
  if the binary_extension not run, the button will reset the SoC\\n\
  stop at the beginning of the ATF,\\n\
  load the fib binary and BL1 elf file\\n\
- Bootloader:\\n\
  if the atf not run, the button will reset the SoC\\n\
  stop at the beginning of the Bootloader\\n\
  load the Bootloader elf image and stop\\n\
\\n\
Please note - if you run Armda-8040-RZ board, need to press on Armada-8040-RZ button\\n\
\""

define macro /OVERWRITE /button armada_8040_rz "set val @armada_8040_rz = 1;"

! Stop the CPU before run any button
STOP
